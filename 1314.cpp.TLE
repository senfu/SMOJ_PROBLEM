#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;
const int MAX_M = 1000100;
const int MAX_N = 10010;
struct line{
	int x;
	int y;
}a[MAX_M * 2];
struct edge{
	int idx;
	int next;
}e[MAX_M * 2];
int ap,n,m;
int fa[MAX_N];
bool one[MAX_N];
bool done;
int h[MAX_N];
int ep;
unsigned char g[MAX_N][MAX_N];
int col[MAX_N];
bool vis[MAX_N];

void addedge(int x,int y){
	if(g[x][y]>0)
	return;
	
	ep++;
	e[ep].idx = y;
	e[ep].next = h[x];
	h[x]=ep;
	return;
}

bool dfs(int v,int c){
	col[v]  = c;
	
	for(int i=h[v];i!=-1;i=e[i].next){
		int x = e[i].idx;
		if(g[v][x]<=0)
		continue;
		if(col[x] == c)
		return false;
		
		if(col[x] == 0 && !(dfs(x,-c)))
		return false;
	}
	
	return true;
}

int find(int x){
	if(fa[x] == x)
	return x;
	
	return fa[x] = find(fa[x]);
}

void change(int x){
	col[x]=-col[x];
	vis[x] = true;
	for(int i=h[x];i!=-1;i=e[i].next){
		int v = e[i].idx;
		if(g[x][v]<=0)
		continue;
		
		if(!vis[v])
		change(v);
	}
	return;
}

void add(int x,int y,int idx){
	done = false;
	
	int fx = find(x);
	int fy = find(y);
	if( !one[x] && one[y] ){
		fa[y] = fx;
		one[y] = false;
		col[y] = -col[x];
	}
	else
	if( !one[y] && one[x]){
		fa[x] = fy;
		one[x] = false;
		col[x] = -col[y];
	}
	else
	if(one[x] && one[y] ){
		fa[x] = y;
		one[x] = false;
		one[y] = false;
		col[x] = 1;
		col[y] = -1;
	}
	else
	if(fx == fy){
		if(col[x] == col[y])
		done = true;
	}
	else
	if(fx != fy && !one[x] && !one[y]){
		fa[fy] = fx;
		
		if(col[x] == col[y]){
			memset(vis,false,sizeof(vis));
			change(y);
		}
	}
	
	addedge(x,y);
	addedge(y,x);
	g[x][y]++;
	g[y][x]++;
	
	if(done)
	printf("NO\n");
	else
	printf("YES\n");
	
	return;
}

void _union(int x,int y){
	int fx = find(x);
	int fy = find(y);
	if(fx == fy)
	return;
	
	fa[fy] = fx;
	one[x]=one[y]=false;
	return;
}

bool dfs2(int v,int c){
	col[v]  = c;
	
	for(int i=h[v];i!=-1;i=e[i].next){
		int x = e[i].idx;
		if(g[v][x]<=0)
		continue;
		if(col[x] == c)
		return false;
		
		if(col[x] == 0){
			_union(v,x);
			bool res = dfs2(x,-c);
			if(!res)
			return false;
		}
	}
	
	return true;
}

void _delete(){
	int x = a[ap].x;
	int y = a[ap].y;
	g[x][y]--;
	g[y][x]--;
	ap--;
	done = false;
	
	memset(col,0,sizeof(col));
	for(int i=1;i<=n;i++)
	fa[i]=i;
	
	for(int i=1;i<=n;i++)
	one[i] = true;
	
	for(int i = 1;i<=n;i++)
	if(col[i] == 0)
	if(!dfs2(i,1)){
		done = true;
		break;
	}
	
	if(done)
	printf("NO\n");
	else
	printf("YES\n");
	
	return;
}

int main(){
	freopen("1314.in","r",stdin);
	freopen("1314.out","w",stdout);
	
	memset(h,-1,sizeof(h));
	memset(one,true,sizeof(one));
	
	scanf("%d %d",&n,&m);
	
	for(int i=1;i<=n;i++)
	fa[i]=i;
	
	int op,x,y;
	for(int i=1;i<=m;i++){
		scanf("%d",&op);
		if(op == 2)
		_delete();
		
		if(op == 1){
			scanf("%d %d",&x,&y);
			ap++;
			a[ap].x = x;
			a[ap].y = y;
			if(done)
			printf("NO\n");
			else
			add(x,y,i);
		}
	}
	return 0;
}
